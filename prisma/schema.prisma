generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AnimalDisease {
  None
  Rabies
}

enum JobType {
  Cop
  Vet
  Doctor
  StreetSweeper
}

enum ItemType {
  Greenhouse
  Weapon
  Armor
  Food
  Farm
  Tool
  Ore
}

model Guild {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordId String @unique

  users    User[]   @relation(references: [id], fields: [usersIds], name: "GuildsUsers")
  usersIds String[] @db.ObjectId

  editors    User[]   @relation(references: [id], fields: [editorsIds], name: "GuildsEditors")
  editorsIds String[] @db.ObjectId

  imprisonedUsers   UserPrison[]
  userGuildBalances UserGuildData[]

  blacklistedCommands String[]
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordId String @unique

  guilds    Guild[]  @relation(references: [id], fields: [guildsIds], name: "GuildsUsers")
  guildsIds String[] @db.ObjectId

  guildsEditors   Guild[]  @relation(fields: [guildsEditorsId], references: [id], name: "GuildsEditors")
  guildsEditorsId String[] @db.ObjectId

  guildPrisoners UserPrison[]
  userGuildDatas UserGuildData[]

  diamonds Int @default(0)
}

model UserPrison {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  @@unique([userId, guildId])
}

model Job {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserGuildData[]
  type  JobType         @unique

  cooldown Int   @default(3600) // cooldown in seconds
  salary   Float
}

model Item {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventories InventoryItem[]

  name        String
  description String

  type  ItemType
  emoji String

  price           Float
  priceInDiamonds Boolean @default(false)

  data   Json?
  Animal Animal[]
}

model Inventory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   UserGuildData @relation(fields: [userId], references: [id])
  userId String        @unique @db.ObjectId

  items InventoryItem[]
}

model InventoryItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  item   Item   @relation(fields: [itemId], references: [id])
  itemId String @db.ObjectId

  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String    @db.ObjectId

  amount Int   @default(1)
  data   Json?

  @@unique([itemId, inventoryId])
}

model UserGuildData {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  job   Job?    @relation(fields: [jobId], references: [id])
  jobId String? @db.ObjectId

  /// type Vaccination = {
  ///     immunizationTime: number;
  ///     infected: boolean;
  /// }
  vaccinationData Json?

  veterinaryData Json?

  /// type EmploymentData = {
  ///   type: EmployeeType;
  ///   amount: number;
  /// }[]
  employmentData Json?

  inventory Inventory?

  farm       Farm?
  greenhouse Greenhouse?

  workedAt         DateTime?
  robbedAt         DateTime?
  robbedFarmAt     DateTime?
  committedCrimeAt DateTime?

  robFarmRemainingCount Int @default(3)

  lastDaily   DateTime?
  lastBankFee DateTime?

  energy          Int       @default(1000)
  energyUpdatedAt DateTime?

  balance      Float @default(0)
  bankBalance  Float @default(0)
  dirtyBalance Float @default(0)

  @@unique([userId, guildId])
}

enum AnimalType {
  Horse
  Rabbit
  Chicken
}

model Animal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type AnimalType @unique

  item   Item?   @relation(fields: [itemId], references: [id])
  itemId String? @db.ObjectId

  // [min, max]
  produceItemRange Int[]

  farms FarmAnimal[]

  name        String
  emoji       String
  description String

  price Float
  isPet Boolean @default(false)
}

model FarmAnimal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  farm   Farm   @relation(fields: [farmId], references: [id])
  farmId String @db.ObjectId

  animal   Animal @relation(fields: [animalId], references: [id])
  animalId String @db.ObjectId

  energy Int @default(1000)

  lastFedAt      DateTime?
  lastProducedAt DateTime?

  disease  AnimalDisease @default(None)
  nickname String?

  @@unique([farmId, animalId])
}

model Farm {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userGuildData   UserGuildData @relation(fields: [userGuildDataId], references: [id])
  userGuildDataId String        @unique @db.ObjectId

  // number[][]
  purchasedArea Json

  // { createdAt, growthRate, itemId, itemSlug }[]
  plantData Json

  farmAnimals FarmAnimal[]
}

model Greenhouse {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userGuildData   UserGuildData @relation(fields: [userGuildDataId], references: [id])
  userGuildDataId String        @unique @db.ObjectId

  // number[][]
  purchasedArea Json

  // { createdAt, growthRate, itemId, itemSlug, amountRobbed }[]
  plantData Json
}
