generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Guild {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordId String @unique

  users    User[]   @relation(references: [id], fields: [usersIds], name: "GuildsUsers")
  usersIds String[] @db.ObjectId

  editors    User[]   @relation(references: [id], fields: [editorsIds], name: "GuildsEditors")
  editorsIds String[] @db.ObjectId

  imprisonedUsers UserPrison[]
  transactions    Transaction[]
}

enum UserDisease {
  Flu
  Tetanus
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordId String @unique

  guilds    Guild[]  @relation(references: [id], fields: [guildsIds], name: "GuildsUsers")
  guildsIds String[] @db.ObjectId

  guildsEditors   Guild[]  @relation(fields: [guildsEditorsId], references: [id], name: "GuildsEditors")
  guildsEditorsId String[] @db.ObjectId

  job   Job?    @relation(fields: [jobId], references: [id])
  jobId String? @db.ObjectId

  guildPrisoners UserPrison[]
  transactions   Transaction[]

  disease UserDisease?

  energy          Int       @default(1000)
  energyUpdatedAt DateTime?

  lastDaily DateTime?

  diamonds Int @default(0)

  balance      Float @default(0)
  dirtyBalance Float @default(0)
}

model UserPrison {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  releasedAt DateTime?
}

enum TransactionType {
  Crime
  Deposit
  Withdraw
}

enum TransactionStatus {
  Success
  Pending
  Failed
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type   TransactionType
  status TransactionStatus @default(Pending)

  amount      Float
  description String?

  userId  String @db.ObjectId
  guildId String @db.ObjectId

  user  User  @relation(fields: [userId], references: [id])
  guild Guild @relation(fields: [guildId], references: [id])
}

enum JobType {
  Cop
  Vet
  Doctor
}

model Job {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
  type  JobType

  cooldown DateTime?
  salary   Float
}
